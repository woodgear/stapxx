#!/usr/bin/env stap++


global jitted

probe begin
{
    warn(sprintf("Start tracing %d \n", target()))
    %( "120" != ""  %?
    warn(sprintf("Please wait for 120 seconds...\n"))
    %:
    warn("Hit Ctrl-C to end.\n")
    %)
}

probe timer.profile
{
    if (pid() == target()) {
        start =  local_clock_ns()
        process_event()
        end = local_clock_ns() 
        printf("diff %d ns \n",end-start)
    }
}

probe timer.s(1)
{
    printf("time up %ds. jitted %d\n",1,jitted)
    exit()
}

probe end {
    warn("end.\n")
}

function process_event() {
    # ml: lua_State
    mL = ngx_lua_get_main_lua_vm()
    printf("wg: ml %x\n",mL)

    # g: global_State
    g = luajit_G(mL)
    printf("wg: g %x\n",g)

    # L: lua_State 
    l = luajit_cur_thread(g)
    printf("wg: cur_L %x \n",l)
    printf("wg: status  %d \n",lua_state_status(l))

    vmstate = luajit_global_State_vmstate(g)
    printf("wg: vmstate  %d \n",vmstate)

    if (vmstate >= 0) {
        jitted++
    }
}


function ngx_lua_get_main_lua_vm()
{
    if (@defined(@var("globalL", "/proc/2091042/root/openresty-wg/target/nginx/sbin/nginx"))) {
        mL = @var("globalL", "/proc/2091042/root/openresty-wg/target/nginx/sbin/nginx")
        printf("wg: ml from globalL\n")
        return mL
    }
    printf("wg: ml from ngx_http_lua_main_conf_t\n")
    lmcf = ngx_lua_cycle_get_main_conf()
    if (lmcf) {
        
        return @cast(lmcf, "ngx_http_lua_main_conf_t", "/proc/2091042/root/openresty-wg/target/nginx/sbin/nginx")->lua
    }
    return 0
}

function ngx_lua_cycle_get_main_conf()
{
    cycle=@var("ngx_cycle", "/proc/2091042/root/openresty-wg/target/nginx/sbin/nginx")
    index=@var("ngx_http_lua_module", "/proc/2091042/root/openresty-wg/target/nginx/sbin/nginx")->ctx_index
    printf("wg: cycle %x\n",cycle)
    printf("wg: index %d\n",index)
    return ngx_cycle_get_module_main_conf(cycle,index)
}


function ngx_cycle_get_module_main_conf(cycle, module_index)
{
    
    http_index = @var("ngx_http_module", "/proc/2091042/root/openresty-wg/target/nginx/sbin/nginx")->index

    printf("wg: http index %d http-lua index %d \n",http_index,module_index)

    ctx = @cast(cycle, "ngx_cycle_t", "/proc/2091042/root/openresty-wg/target/nginx/sbin/nginx")->conf_ctx[http_index]
    if (ctx == 0) {
        return 0
    }
    
    return @cast(ctx, "ngx_http_conf_ctx_t", "/proc/2091042/root/openresty-wg/target/nginx/sbin/nginx")->main_conf[module_index]
}


# luajit
function luajit_G(L)
{
    
    return @cast(L, "lua_State", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")->glref->ptr64
}


function luajit_cur_thread(g)
{
    
    gco = @cast(g, "global_State", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")->cur_L->gcptr64
    if (gco == 0) {
        return 0
    }
    
    printf("wg: cur_thread %x\n",&@cast(gco, "GCobj", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")->th)
    return &@cast(gco, "GCobj", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")->th
}

function lua_state_status(l) {
   
   return @cast(l, "lua_State", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")->status
}


function luajit_global_State_vmstate(g)
{
    return @cast(g, "global_State", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")->vmstate
}