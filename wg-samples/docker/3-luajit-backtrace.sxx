#!/usr/bin/env stap++

@define LJ_VMST_GC %( 2 %)

global jitted
global vmst_gc
global nojitted 

probe begin
{
    warn(sprintf("Start tracing %d ($^exec_path)\n", target()))
    %( "$^arg_time" != ""  %?
    warn(sprintf("Please wait for $^arg_time seconds...\n"))
    %:
    warn("Hit Ctrl-C to end.\n")
    %)
}

probe timer.profile
{
    if (pid() == target()) {
        start =  local_clock_ns()
        process_event()
        end = local_clock_ns() 
        printf("diff %d ns \n",end-start)
    }
}

probe timer.s(120)
{
    printf("time upxx. %d jitted %d %d %d\n",time,jitted,nojitted,vmst_gc)
    exit()
}

probe end {
    warn("end.\n")
}

function process_event() {
    # ml: lua_State
    mL = ngx_lua_get_main_lua_vm()
    printf("wg: ml %x\n",mL)

    # g: global_State
    g = luajit_G(mL)
    $*g := @cast(g, "global_State", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")
    printf("wg: g %x\n",g)

    # L: lua_State 
    l = luajit_cur_thread(g)
    printf("wg: cur_L %x \n",l)
    printf("wg: status  %d \n",lua_state_status(l))

    vmstate = luajit_global_State_vmstate(g)
    printf("wg: vmstate  %d \n",vmstate)

    vmst_gc = (vmstate == ~@LJ_VMST_GC && $*g->jit_base->ptr64)
    if (vmstate >= 0) {
        jitted++
    } else if (vmst_gc) {
        vmst_gc++
    } else {
        nojitted++
    }

    bt =  luajit_backtrace(l,g)

}


function ngx_lua_get_main_lua_vm()
{
    if (@defined(@var("globalL", "$^exec_path"))) {
        mL = @var("globalL", "$^exec_path")
        printf("wg: ml from globalL\n")
        return mL
    }
    printf("wg: ml from ngx_http_lua_main_conf_t\n")
    lmcf = ngx_lua_cycle_get_main_conf()
    if (lmcf) {
        $*lmcf := @cast(lmcf, "ngx_http_lua_main_conf_t", "$^exec_path")
        return $*lmcf->lua
    }
    return 0
}

function ngx_lua_cycle_get_main_conf()
{
    return ngx_cycle_get_module_main_conf(@var("ngx_cycle", "$^exec_path"),
                                       @var("ngx_http_lua_module", "$^exec_path")->ctx_index)
}


function ngx_cycle_get_module_main_conf(cycle, module_index)
{
    $*cycle := @cast(cycle, "ngx_cycle_t", "$^exec_path")
    http_index = @var("ngx_http_module", "$^exec_path")->index

    printf("wg: http index %d http-lua index %d \n",http_index,module_index)

    ctx = $*cycle->conf_ctx[http_index]
    if (ctx == 0) {
        return 0
    }
    $*ctx := @cast(ctx, "ngx_http_conf_ctx_t", "$^exec_path")
    return $*ctx->main_conf[module_index]
}


# luajit
function luajit_G(L)
{
    $*L := @cast(L, "lua_State", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")
    return $*L->glref->ptr64
}


function luajit_cur_thread(g)
{
    $*g := @cast(g, "global_State", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")
    gco = $*g->cur_L->gcptr64
    if (gco == 0) {
        return 0
    }
    $*gco := @cast(gco, "GCobj", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")
    printf("wg: cur_thread %x\n",&$*gco->th)
    return &$*gco->th
}

function lua_state_status(l) {
   $*tl := @cast(l, "lua_State", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")
   return $*tl->status
}


function luajit_global_State_vmstate(g)
{
    return @cast(g, "global_State", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")->vmstate
}


function luajit_backtrace(l, g) {
    # l: lua_State
    # g: global_State

    vmstate = $*g->vmstate
    native_jited_code = vmstate >= 0
    vmst_gc = (vmstate == ~@LJ_VMST_GC && $*g->jit_base->ptr64)
    # ~@LJ_VMST_GC -3

    printf("trace wg: native_jited_code %d vmst_gc %d\n", native_jited_code,vmst_gc)

    if ( native_jited_code) {
        return luajit_jited_backtrace(l,g)
    }
    if ( vmst_gc) {
        printf("trace wg: gc\n")
    }
    printf("trace wg: no-jited\n")
    return ""
}

function luajit_jited_backtrace(l, g) {
    printf("trace wg: jited\n")

    traceno = $*g->vmstate
    t = luajit_get_trace(g, traceno)
    printf("trace wg: traceno %d t %x \n",traceno,t)
    func = luajit_trace_starting_func(l,t)
    printf("trace wg: func %s \n",func)
    #exit()
    return ""
}


function luajit_get_trace(g, traceno)
{
    printf("trace wg: get trace %x %d\n",g,traceno)
    # offsetoff
    zg  = &@cast(0, "GG_State", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")->g
    GG = g - zg
    printf("trace wg: zg %d g %x gg %x\n",zg,g,GG)
    $*GG := @cast(GG, "GG_State", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")
    J = &$*GG->J
    $*J := @cast(J, "jit_State", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")
    if (J == 0) {
        return 0
    }

    return $*J->trace[traceno]->gcptr64
}


function luajit_trace_starting_func(g, trace)
{
    $*trace := @cast(trace, "GCtrace", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")
    gco = $*trace->startpt->gcptr64
    if (gco == 0) {
        return ""
    }
    pt = &$*gco->pt
    $*pt := @cast(pt, "GCproto", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")

    firstline = $*pt->firstline
    printf("trace wg: firstline %d\n",firstline)

    name = luajit_proto_chunkname(pt)  /* GCstr *name */
    printf("trace wg: chunkname len %d \n",name->len)
    printf("trace wg: path %s\n",path)
    path = luajit_unbox_gcstr(name)
    return sprintf("%s:%d", path, firstline)
}

function luajit_proto_chunkname(pt) {
    $*pt := @cast(pt, "GCproto", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")
    gco = $*pt->chunkname->gcptr64
    $*gco := @cast(gco, "GCobj", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")
    return &$*gco->str
}

@define sizeof_GCstr %( &@cast(0, "GCstr", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")[1] %)
@define strdata(s) %(
    (@s + @sizeof_GCstr)
%)

/* convert GCstr to stap string */
function luajit_unbox_gcstr(gcs)
{
    $*gcs := @cast(gcs, "GCstr", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")
    printf("trace wg: gcstr %x\n",gcs)
    if (gcs == 0) {
        return ""
    }

   $*gcs := @cast(gcs, "GCstr", "/proc/2091042/root/openresty-wg/target/luajit/lib/libluajit-5.1.so.2")
   src = @strdata(gcs)
   printf("trace wg: gcstr src %x len %d\n",src,$*gcs->len)
   return user_string_n_warn(src, $*gcs->len)
}